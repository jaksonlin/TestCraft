mutation.tree.root=PiTest 变异历史
clear.button=清除所有历史
search.placeholder=搜索历史
inspection.group.name=Pitest 单元测试规范
inspection.display.name=Pitest 单元测试规范检查
inspection.problem.descriptor=缺少或无效的单元测试注解
llm.generate.suggestions=生成建议
llm.check.prompt=检查提示
llm.select.file=选择类
llm.thinking=思考中
llm.copy.to.clipboard=复制到剪贴板
llm.clear=清除聊天记录
llm.user=用户
llm.assistant=助手
llm.system=系统
llm.error=错误
llm.dry.run.prompt=试运行提示词
llm.new.unit.test.suggestion=新的单元测试建议
llm.prompt.system=你是一个专注于基于变异测试结果改进单元测试覆盖率的代码分析助手。你的任务是首先分析变异结果，查看同时存在`KILLED`和`SURVIVED`变异的代码行；然后查看可以执行这些变异的单元测试，检查测试如何`KILLED`变异以及为什么有些变异`SURVIVED`。最后，建议具体的单元测试来处理`SURVIVED`的变异。
llm.prompt.user=请分析以下变异测试结果并建议具体的单元测试：\n\n=== 被测源代码 ===\n```\n%s\n```\n\n=== 当前测试文件 ===\n```\n%s\n```\n\n=== 变异测试统计 ===\n总变异数：%d\n已杀死变异：%d (%.1f%%)\n存活变异：%d (%.1f%%)\n\n=== 详细变异分析 ===\n%s\n\n根据以上分析，请提供：\n1. 处理存活变异的具体测试用例\n2. 每个测试用例所需的精确断言\n3. 每个测试必要性的简要说明\n请使用markdown格式回复，测试用例使用代码块。
llm.error.connection=无法连接到Ollama服务器。请检查服务器是否正在运行且可访问。

# LLM Settings UI
llm.settings.connection.title=连接设置
llm.settings.model.title=模型设置
llm.settings.output.title=输出设置
llm.settings.test.title=连接测试

llm.settings.host.label=主机：
llm.settings.port.label=端口：
llm.settings.model.label=模型：
llm.settings.maxTokens.label=最大令牌数：
llm.settings.temperature.label=温度：
llm.settings.timeout.label=超时（毫秒）：
llm.settings.copyMarkdown.label=以Markdown格式复制输出

llm.settings.host.tooltip=Ollama服务器的主机名或IP地址
llm.settings.port.tooltip=Ollama服务器的端口号
llm.settings.model.tooltip=要使用的Ollama模型名称
llm.settings.maxTokens.tooltip=响应中的最大令牌数
llm.settings.temperature.tooltip=控制响应的随机性（0.0到1.0）
llm.settings.timeout.tooltip=请求超时时间（毫秒）
llm.settings.copyMarkdown.tooltip=启用时，复制的输出将为Markdown格式。禁用时，复制渲染后的输出。

llm.settings.test.button=测试连接
llm.settings.help.title=连接帮助：
llm.settings.help.running=确保Ollama正在您的系统上运行
llm.settings.help.host=默认主机是localhost（127.0.0.1）
llm.settings.help.port=默认端口是11434

# Settings Menu
settings.testcraft.title=TestCraft
settings.testcraft.description=配置 TestCraft 的各个方面：
settings.testcraft.annotations=测试注解
settings.testcraft.annotations.description=配置测试用例注解模式和验证
settings.testcraft.asserts=测试用例验证
settings.testcraft.asserts.description=设置验证测试断言的规则
settings.testcraft.llm=LLM 设置
settings.testcraft.llm.description=配置 Ollama LLM 集成以获取测试建议

# Menu Actions
menu.unittest.top=单元测试助手
menu.unittest.tools=单元测试辅助工具
menu.unittest.run.mutation=运行变异测试
menu.unittest.check.annotation=运行当前方法注解检查
menu.unittest.generate.annotation=在方法上生成注解命令

# Tool Windows
toolwindow.mutation.title=TestCraft 变异测试历史
toolwindow.llm.title=TestCraft LLM 建议

# Action Text (using IntelliJ's message format)
action.RunPitestAction.text=运行变异测试
action.RunCaseAnnoationCheckAction.text=运行当前方法注解检查
action.GenerateAnnotationCommandAction.text=在方法上生成测试用例注解
action.UnittestHelperToolMenu.text=TestCraft 单元测试助手
action.UnittestHelperSubMenu.text=TestCraft 单元测试辅助工具

# Invalid Test Case Settings
settings.invalidTestCase.title=测试用例验证设置
settings.invalidTestCase.enableCheck=启用无效断言检查
settings.invalidTestCase.enableCheck.tooltip=启用后，将检查测试方法中的无效断言模式
settings.invalidTestCase.enableCommentCheck=启用测试步骤注释检查
settings.invalidTestCase.enableCommentCheck.tooltip=启用后，将检查测试方法中的描述性注释
settings.invalidTestCase.assertions.title=无效断言模式
settings.invalidTestCase.assertions.description=输入应标记为无效的断言模式（每行一个）：
settings.invalidTestCase.assertions.examples.title=将被标记为无效的断言示例：
settings.invalidTestCase.assertions.examples.1=• assertTrue(true) - 无意义的断言
settings.invalidTestCase.assertions.examples.2=• assertEquals(1, 1) - 比较相同的值
settings.invalidTestCase.assertions.examples.3=• assertNotNull(new Object()) - 测试新创建的对象
settings.invalidTestCase.assertions.examples.4=• assertEquals("success", "success") - 比较相同的字符串