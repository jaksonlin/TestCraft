mutation.tree.root=PiTest Mutation History
clear.button=Clear All History
search.placeholder=Search History
inspection.group.name=Pitest Unit Test Specification
inspection.display.name=Pitest Unit Test Specification Inspection
inspection.problem.descriptor=Missing or invalid unit test annotation
llm.generate.suggestions=Generate Suggestions
llm.check.prompt=Check Prompt
llm.select.file=Select Class
llm.thinking=Thinking
llm.copy.to.clipboard=Copy to Clipboard
llm.clear=Clear Chat
llm.user=User
llm.assistant=Assistant
llm.system=System
llm.error=Error
llm.dry.run.prompt=Dry Run Prompt
llm.new.unit.test.suggestion=New Unit Test Suggestion
llm.prompt.system=You are a specialized code analysis assistant focused on improving unit test coverage based on mutation testing results. Your task is to first analysis the mutation result, look at the lines that have both `KILLED` and `SURVIVED` mutations; and then look at the unit tests that can execute the mutations, exam how the test `KILLED` the mutation and why some `SURVIVED`. Finally, suggest specific unit tests to handle the `SURVIVED` mutations.
llm.prompt.user=Please analyze the following mutation testing results and suggest specific unit tests:\n\n=== Source Code Under Test ===\n```\n%s\n```\n\n=== Current Test File ===\n```\n%s\n```\n\n=== Mutation Testing Statistics ===\nTotal Mutations: %d\nKilled Mutations: %d (%.1f%%)\nSurvived Mutations: %d (%.1f%%)\n\n=== Detailed Mutation Analysis ===\n%s\n\nBased on the above analysis, please provide:\n1. Specific test cases to handle survived mutations\n2. The exact assertions needed for each test case\n3. Brief explanations of why each test is necessary\nFormat your response in markdown with code blocks for the test cases.
llm.error.connection=Cannot connect to Ollama server. Please check if the server is running and accessible.